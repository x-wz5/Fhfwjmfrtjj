local buffer = {}
buffer.__index = buffer

function buffer.new(bytecode)
    local self = setmetatable({}, buffer)
    self.stream = bytecode
    self.cursor = 0
    return self
end

function buffer:readByte()
    local value = string.byte(self.stream, self.cursor + 1)
    self.cursor = self.cursor + 1
    return value
end

function buffer:readWord()
    local a = self:readByte()
    local b = self:readByte()
    local c = self:readByte()
    local d = self:readByte()
    return (d << 24) | (c << 16) | (b << 8) | a
end

function buffer:readVarInt()
    local result = 0
    for i = 0, 4 do
        local value = self:readByte()
        result = bit32.bor(result, bit32.lshift(bit32.band(value, 0x7F), i * 7))
        if bit32.band(value, 0x80) == 0 then
            break
        end
    end
    return result
end

function buffer:readString()
    local len = self:readVarInt()
    local result = self.stream:sub(self.cursor + 1, self.cursor + len)
    self.cursor = self.cursor + len
    return result
end

function buffer:readDouble()
    local result = string.unpack(">d", self.stream:sub(self.cursor + 1, self.cursor + 8))
    self.cursor = self.cursor + 8
    return result
end

return buffer